#lang racket

(require "../src/driver.rkt")

;; WOW! I've never seem something that is more quickcheck friendly than this.
;;
;; I ended up with this file after cleaning up the tests and grouping them
;; together sanely. This is obviously a lot of redundant crap and needs to be
;; trimmed down.
(add-tests "+"
  [(+ 1 2) => 3]
  [(+ 1 -2) => -1]
  [(+ -1 2) => 1]
  [(+ -1 -2) => -3]
  [(+ 536870911 -1) => 536870910]
  [(+ 536870910 1) => 536870911]
  [(+ -536870912 1) => -536870911]
  [(+ -536870911 -1) => -536870912]
  [(+ 536870911 -536870912) => -1]
  [(+ 1 (+ 2 3)) => 6]
  [(+ 1 (+ 2 -3)) => 0]
  [(+ 1 (+ -2 3)) => 2]
  [(+ 1 (+ -2 -3)) => -4]
  [(+ -1 (+ 2 3)) => 4]
  [(+ -1 (+ 2 -3)) => -2]
  [(+ -1 (+ -2 3)) => 0]
  [(+ -1 (+ -2 -3)) => -6]
  [(+ (+ 1 2) 3) => 6]
  [(+ (+ 1 2) -3) => 0]
  [(+ (+ 1 -2) 3) => 2]
  [(+ (+ 1 -2) -3) => -4]
  [(+ (+ -1 2) 3) => 4]
  [(+ (+ -1 2) -3) => -2]
  [(+ (+ -1 -2) 3) => 0]
  [(+ (+ -1 -2) -3) => -6]
  [(+ (+ (+ (+ (+ (+ (+ (+ 1 2) 3) 4) 5) 6) 7) 8) 9) => 45]
  [(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (+ 6 (+ 7 (+ 8 9)))))))) => 45]
  [(+ (+ 1 2) (+ 3 4)) => 10]
  [(+ (+ 1 2) (+ 3 -4)) => 2]
  [(+ (+ 1 2) (+ -3 4)) => 4]
  [(+ (+ 1 2) (+ -3 -4)) => -4]
  [(+ (+ 1 -2) (+ 3 4)) => 6]
  [(+ (+ 1 -2) (+ 3 -4)) => -2]
  [(+ (+ 1 -2) (+ -3 4)) => 0]
  [(+ (+ 1 -2) (+ -3 -4)) => -8]
  [(+ (+ -1 2) (+ 3 4)) => 8]
  [(+ (+ -1 2) (+ 3 -4)) => 0]
  [(+ (+ -1 2) (+ -3 4)) => 2]
  [(+ (+ -1 2) (+ -3 -4)) => -6]
  [(+ (+ -1 -2) (+ 3 4)) => 4]
  [(+ (+ -1 -2) (+ 3 -4)) => -4]
  [(+ (+ -1 -2) (+ -3 4)) => -2]
  [(+ (+ -1 -2) (+ -3 -4)) => -10]
  [(+ (+ (+ (+ (+ (+ (+ (+ 1 2) 3) 4) 5) 6) 7) 8) 9) => 45]
  [(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (+ 6 (+ 7 (+ 8 9)))))))) => 45]
  [(+ (+ (+ (+ 1 2) (+ 3 4)) (+ (+ 5 6) (+ 7 8)))
        (+ (+ (+ 9 10) (+ 11 12)) (+ (+ 13 14) (+ 15 16))))
   => 136])

(add-tests "-"
  [(- 1 2) => -1]
  [(- 1 -2) => 3]
  [(- -1 2) => -3]
  [(- -1 -2) => 1]
  [(- 536870910 -1) => 536870911]
  [(- 536870911 1) => 536870910]
  [(- -536870911 1) => -536870912]
  [(- -536870912 -1) => -536870911]
  [(- 1 536870911) => -536870910]
  [(- -1 536870911) => -536870912]
  [(- 1 -536870910) => 536870911]
  [(- -1 -536870912) => 536870911]
  [(- 536870911 536870911) => 0]
  [(- -536870911 -536870912) => 1]
  [(- 1 (- 2 3)) => 2]
  [(- 1 (- 2 -3)) => -4]
  [(- 1 (- -2 3)) => 6]
  [(- 1 (- -2 -3)) => 0]
  [(- -1 (- 2 3)) => 0]
  [(- -1 (- 2 -3)) => -6]
  [(- -1 (- -2 3)) => 4]
  [(- -1 (- -2 -3)) => -2]
  [(- 0 (- -2 -3)) => -1]
  [(- (- 1 2) 3) => -4]
  [(- (- 1 2) -3) => 2]
  [(- (- 1 -2) 3) => 0]
  [(- (- 1 -2) -3) => 6]
  [(- (- -1 2) 3) => -6]
  [(- (- -1 2) -3) => 0]
  [(- (- -1 -2) 3) => -2]
  [(- (- -1 -2) -3) => 4]
  [(- (- (- (- (- (- (- (- 1 2) 3) 4) 5) 6) 7) 8) 9) => -43]
  [(- 1 (- 2 (- 3 (- 4 (- 5 (- 6 (- 7 (- 8 9)))))))) => 5]
  [(- (- 1 2) (- 3 4)) => 0]
  [(- (- 1 2) (- 3 -4)) => -8]
  [(- (- 1 2) (- -3 4)) => 6]
  [(- (- 1 2) (- -3 -4)) => -2]
  [(- (- 1 -2) (- 3 4)) => 4]
  [(- (- 1 -2) (- 3 -4)) => -4]
  [(- (- 1 -2) (- -3 4)) => 10]
  [(- (- 1 -2) (- -3 -4)) => 2]
  [(- (- -1 2) (- 3 4)) => -2]
  [(- (- -1 2) (- 3 -4)) => -10]
  [(- (- -1 2) (- -3 4)) => 4]
  [(- (- -1 2) (- -3 -4)) => -4]
  [(- (- -1 -2) (- 3 4)) => 2]
  [(- (- -1 -2) (- 3 -4)) => -6]
  [(- (- -1 -2) (- -3 4)) => 8]
  [(- (- -1 -2) (- -3 -4)) => 0]
  [(- (- (- (- (- (- (- (- 1 2) 3) 4) 5) 6) 7) 8) 9) => -43]
  [(- 1 (- 2 (- 3 (- 4 (- 5 (- 6 (- 7 (- 8 9)))))))) => 5]
  [(- (- (- (- 1 2) (- 3 4)) (- (- 5 6) (- 7 8)))
        (- (- (- 9 10) (- 11 12)) (- (- 13 14) (- 15 16))))
   => 0])

(add-tests "*"
  [(* 2 3) => 6]
  [(* 2 -3) => -6]
  [(* -2 3) => -6]
  [(* -2 -3) => 6]
  [(* 536870911 1) => 536870911]
  [(* 536870911 -1) => -536870911]
  [(* -536870912 1) => -536870912]
  [(* -536870911 -1) => 536870911]
  [(* 2 (* 3 4)) => 24]
  [(* (* 2 3) 4) => 24]
  [(* (* (* (* (* 2 3) 4) 5) 6) 7) => 5040]
  [(* 2 (* 3 (* 4 (* 5 (* 6 7))))) => 5040])

(add-tests "="
  [(= 12 13) => #f]
  [(= 12 12) => #t]
  [(= 16 (+ 13 3)) => #t]
  [(= 16 (+ 13 13)) => #f]
  [(= (+ 13 3) 16) => #t]
  [(= (+ 13 13) 16) => #f])

(add-tests "<"
  [(< 12 13) => #t]
  [(< 12 12) => #f]
  [(< 13 12) => #f]
  [(< 16 (+ 13 1)) => #f]
  [(< 16 (+ 13 3)) => #f]
  [(< 16 (+ 13 13)) => #t]
  [(< (+ 13 1) 16) => #t]
  [(< (+ 13 3) 16) => #f]
  [(< (+ 13 13) 16) => #f])

(add-tests "<="
  [(<= 12 13) => #t]
  [(<= 12 12) => #t]
  [(<= 13 12) => #f]
  [(<= 16 (+ 13 1)) => #f]
  [(<= 16 (+ 13 3)) => #t]
  [(<= 16 (+ 13 13)) => #t]
  [(<= (+ 13 1) 16) => #t]
  [(<= (+ 13 3) 16) => #t]
  [(<= (+ 13 13) 16) => #f])

(add-tests ">"
  [(> 12 13) => #f]
  [(> 12 12) => #f]
  [(> 13 12) => #t]
  [(> 16 (+ 13 1)) => #t]
  [(> 16 (+ 13 3)) => #f]
  [(> 16 (+ 13 13)) => #f]
  [(> (+ 13 1) 16) => #f]
  [(> (+ 13 3) 16) => #f]
  [(> (+ 13 13) 16) => #t])

(add-tests ">="
  [(>= 12 13) => #f]
  [(>= 12 12) => #t]
  [(>= 13 12) => #t]
  [(>= 16 (+ 13 1)) => #t]
  [(>= 16 (+ 13 3)) => #t]
  [(>= 16 (+ 13 13)) => #f]
  [(>= (+ 13 1) 16) => #f]
  [(>= (+ 13 3) 16) => #t]
  [(>= (+ 13 13) 16) => #t])

(add-tests "log {and, or, not}"
  [(logand 3 7) => 3]
  [(logand 3 5) => 1]
  [(logand 2376 2376) => 2376]
  [(logand 2346 (lognot 2346)) => 0]
  [(logand (lognot 2346) 2346) => 0]
  [(logand (lognot (lognot 12)) (lognot (lognot 12))) => 12]
  [(logand (lognot (lognot 12)) (lognot (lognot 12))) => 12]
  [(lognot (logor (lognot 7) 1)) => 6]
  [(lognot (logor 1 (lognot 7))) => 6]
  [(logor 3 16) => 19]
  [(logor 3 5)  => 7]
  [(logor 3 7)  => 7])

(add-tests "remainder/modulo/quotient"
  [(quotient 16 4) => 4]
  [(quotient 5 2) => 2]
  [(quotient -45 7) => -6]
  [(quotient 10 -3) => -3]
  [(quotient -17 -9) => 1]

  [(remainder 16 4) => 0]
  [(remainder 5 2) => 1]
  [(remainder -45 7) => -3]
  [(remainder 10 -3) => 1]
  [(remainder -17 -9) => -8])
